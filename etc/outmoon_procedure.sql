DROP TRIGGER IF EXISTS TRIGGER_POST_LIKE_CNT ON PUBLIC.OUTMOON_POST_LIKE;
DROP FUNCTION IF EXISTS PUBLIC.POST_LIKE_CNT();
DROP TRIGGER IF EXISTS TRIGGER_CMT_LIKE_CNT ON PUBLIC.OUTMOON_CMT_LIKE;
DROP FUNCTION IF EXISTS PUBLIC.CMT_LIKE_CNT();
DROP TRIGGER IF EXISTS TRIGGER_POST_COMMENT_CNT ON PUBLIC.OUTMOON_CMT;
DROP FUNCTION IF EXISTS PUBLIC.POST_COMMENT_CNT();
DROP TRIGGER IF EXISTS TRIGGER_USER_POST_CNT ON PUBLIC.OUTMOON_POST;
DROP FUNCTION IF EXISTS PUBLIC.USER_POST_CNT();


--POST에 대한 좋아요 트리거 함수 
CREATE OR REPLACE FUNCTION POST_LIKE_CNT() RETURNS TRIGGER AS $TRIGGER_POST_LIKE_CNT$
DECLARE COUNT INT;

BEGIN
	IF(TG_OP = 'INSERT') THEN
		SELECT COUNT(*) INTO COUNT 
			FROM OUTMOON_POST_LIKE 
			WHERE POST_ID = NEW.POST_ID;

		UPDATE OUTMOON_POST
			SET LIKE_CNT = COUNT
			WHERE ID = NEW.POST_ID;
		RETURN NEW;
	
	ELSEIF(TG_OP = 'DELETE') THEN
		SELECT COUNT(*) INTO COUNT
			FROM OUTMOON_POST_LIKE 
			WHERE POST_ID = OLD.POST_ID;
		
		UPDATE OUTMOON_POST 
			SET LIKE_CNT = COUNT
			WHERE ID = OLD.POST_ID;
		RETURN OLD;
	END IF;
	
	RETURN NULL;
		
END;

$TRIGGER_POST_LIKE_CNT$ LANGUAGE PLPGSQL;

--COMMENT 에 대한 좋아요 트리거 함수
CREATE OR REPLACE FUNCTION CMT_LIKE_CNT() RETURNS TRIGGER AS $TRIGGER_CMT_LIKE_CNT$
DECLARE COUNT INT;

BEGIN
	IF(TG_OP = 'INSERT') THEN
		SELECT COUNT(*) INTO COUNT
			FROM OUTMOON_CMT_LIKE
			WHERE CMT_ID =  NEW.CMT_ID;
		
		UPDATE OUTMOON_CMT 
			SET LIKE_CNT = COUNT
			WHERE ID = NEW.CMT_ID;
		
		RETURN NEW;
	ELSEIF(TG_OP = 'DELETE') THEN
		SELECT COUNT(*) INTO COUNT
			FROM OUTMOON_CMT_LIKE
			WHERE CMT_ID  = OLD.CMT_ID;
		
		UPDATE OUTMOON_CMT 
			SET LIKE_CNT = COUNT
			WHERE ID = OLD.CMT_ID;
		
		RETURN OLD;
	END IF;

	RETURN NULL;
END;


$TRIGGER_CMT_LIKE_CNT$ LANGUAGE PLPGSQL;


--게시물에 대한 댓글 갯수 트리거 함수
--댓글에 대한 대댓글 갯수 트리거 함수
CREATE OR REPLACE FUNCTION POST_COMMENT_CNT() RETURNS TRIGGER AS $TRIGGER_POST_COMMENT_CNT$
DECLARE COUNT INT;

BEGIN
	IF(TG_OP = 'INSERT') THEN
	
--		대댓글인 경우, PARENT CMT의 댓글 갯수 업데이트
		IF(NEW.PARENT_ID != 0) THEN
			SELECT COUNT(*) INTO COUNT
				FROM OUTMOON_CMT
				WHERE PARENT_ID =  NEW.PARENT_ID;
			
			UPDATE OUTMOON_CMT 
				SET COMMENT_CNT = COUNT
				WHERE ID = NEW.PARENT_ID;
			
			RAISE NOTICE 'POST_ID IS %', NEW.POST_ID;
			RAISE NOTICE 'PARENT_ID IS %', NEW.PARENT_ID;
		END IF;
	
		SELECT COUNT(*) INTO COUNT
			FROM OUTMOON_CMT
			WHERE POST_ID =  NEW.POST_ID;
		
		UPDATE OUTMOON_POST 
			SET COMMENT_CNT = COUNT
			WHERE ID = NEW.POST_ID;
		
		RAISE NOTICE 'POST_ID IS %', NEW.POST_ID;
		RAISE NOTICE 'PARENT_ID IS %', NEW.PARENT_ID;
		
		RETURN NEW;
	
	ELSEIF(TG_OP = 'DELETE') THEN
	
--		대댓글인 경우 PARENT CMT의 댓글 갯수 업데이트
		IF(OLD.PARENT_ID != 0) THEN
			SELECT COUNT(*) INTO COUNT
				FROM OUTMOON_CMT
				WHERE PARENT_ID  = OLD.PARENT_ID;
			
			UPDATE OUTMOON_CMT 
				SET COMMENT_CNT = COUNT
				WHERE ID = OLD.PARENT_ID;
		END IF;
	
	
--		PARENT CMT가 삭제될 때, CHILREN CMT도 같이 삭제되도록.. 제약조건 때문에..BEFOR로 트리거 설정해야하나...
		DELETE 
			FROM OUTMOON_CMT 
			WHERE PARENT_ID = OLD.ID;
	
		SELECT COUNT(*) INTO COUNT
			FROM OUTMOON_CMT
			WHERE POST_ID  = OLD.POST_ID;
		
		UPDATE OUTMOON_POST 
			SET COMMENT_CNT = COUNT
			WHERE ID = OLD.POST_ID;
		
		RAISE NOTICE 'POST_ID IS %', OLD.POST_ID;
		RAISE NOTICE 'PARENT_ID IS %', OLD.PARENT_ID;
		
		RETURN OLD;
	END IF;
	RETURN NULL;
END;
$TRIGGER_POST_COMMENT_CNT$ LANGUAGE PLPGSQL;


--COMMENT 에 대한 좋아요 트리거 함수
CREATE OR REPLACE FUNCTION USER_POST_CNT() RETURNS TRIGGER AS $TRIGGER_USER_POST_CNT$
DECLARE COUNT INT;

BEGIN
	IF(TG_OP = 'INSERT') THEN
		SELECT COUNT(*) INTO COUNT
			FROM OUTMOON_POST
			WHERE WRITER_ID =  NEW.WRITER_ID;
		
		UPDATE OUTMOON_USER 
			SET POST_CNT = COUNT
			WHERE ID = NEW.WRITER_ID;
		
		RETURN NEW;
--	POST는 FLAG로 DELETE여부를 처리하기 때문에.. TRIGGER가 일어날 OPERATION를 UPDATE로 설정하겠다.	
	ELSEIF(TG_OP = 'DELETE') THEN
		SELECT COUNT(*) INTO COUNT
			FROM OUTMOON_POST
			WHERE WRITER_ID  = OLD.WRITER_ID;
		
		UPDATE OUTMOON_USER 
			SET POST_CNT = COUNT
			WHERE ID = OLD.WRITER_ID;
		
		RETURN OLD;
	END IF;

	RETURN NULL;
END;
$TRIGGER_USER_POST_CNT$ LANGUAGE PLPGSQL;

--트리거 생성
CREATE TRIGGER TRIGGER_POST_LIKE_CNT
	AFTER INSERT OR UPDATE OR DELETE 
	ON OUTMOON_POST_LIKE
	FOR EACH ROW EXECUTE PROCEDURE POST_LIKE_CNT();
	
CREATE TRIGGER TRIGGER_CMT_LIKE_CNT
	AFTER INSERT OR UPDATE OR DELETE 
	ON OUTMOON_CMT_LIKE
	FOR EACH  ROW EXECUTE PROCEDURE CMT_LIKE_CNT();

CREATE TRIGGER TRIGGER_POST_COMMENT_CNT AFTER
INSERT
	OR
UPDATE
	OR
DELETE
	ON
	OUTMOON_CMT FOR EACH ROW EXECUTE PROCEDURE POST_COMMENT_CNT();

CREATE TRIGGER TRIGGER_USER_POST_CNT
	AFTER INSERT OR UPDATE OR DELETE 
	ON OUTMOON_POST
	FOR EACH  ROW EXECUTE PROCEDURE USER_POST_CNT();