<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.highdk.api.v1.post.PostDao">
	
	<!-- SYJ, 추가 2020.06.12 -->
	<resultMap id="PostsWithFullResource" type="Post">
	  <id property="id" column="POST_ID" />
	  <result property="content" column="POST_CONTENT"/>
	  <result property="commentCnt" column="POST_COMMENT_CNT"/>
	  <result property="likeCnt" column="POST_LIKE_CNT"/>
	  <result property="writtenAt" column="POST_WRITTEN_AT"/>
	  <result property="updatedAt" column="POST_UPDATED_AT"/>
	  <association property="writer" javaType="User">
	    <id property="id" column="POST_WRITER_ID"/>
	    <result property="nickName" column="POST_WRITER_NICK_NAME"/>
	  </association>
	  <collection property="images" ofType="Image">
	  	<id property="id" column="IMAGE_ID" />
	  	<result property="name" column="IMAGE_NAME"/>
	  </collection>
	  <collection property="comments" ofType="Comment">
	  	<id property="id" column="CMT_ID" />
	  	<result property="parentId" column="CMT_PARENT_ID"/>
	  	<result property="content" column="CMT_CONTENT"/>
	  	<result property="commentCnt" column="CMT_COMMENT_CNT"/>
	  	<result property="likeCnt" column="CMT_LIKE_CNT"/>
	  	<result property="writtenAt" column="CMT_WRITTEN_AT"/>
	  	<result property="updatedAt" column="CMT_UPDATED_AT"/>
	  	<association property="writer" javaType="User">
		    <id property="id" column="CMT_WRITER_ID"/>
		    <result property="nickName" column="CMT_WRITER_NICK_NAME"/>
	  	</association>
	  </collection>
	</resultMap>
	

	<insert id="create" useGeneratedKeys="true" keyProperty="id" parameterType="Post">
		INSERT
			INTO
			OUTMOON_POST (
				CONTENT,
				UPDATED_AT,
				WRITTEN_AT,
				WRITER_ID
			)
		VALUES (
			#{content},
			now(),
			now(),
			#{writerId}
		);
	</insert>
	
	
	<select id="getById" parameterType="Long" resultType="Post">
		SELECT
			ID,
			CONTENT,
			WRITTEN_AT,
			UPDATED_AT,
			LIKE_CNT,
			COMMENT_CNT,
			WRITER_ID
		FROM
			OUTMOON_POST
		WHERE
				ID = #{id}
			AND is_used = TRUE;
	</select>
	
	<!-- SYJ, 변경 2020.06.12 -->
	<select id="findById" parameterType="Long" resultMap="PostsWithFullResource">
		SELECT
			P.ID 				AS POST_ID,
			P.CONTENT 			AS POST_CONTENT,
			P.COMMENT_CNT 		AS POST_COMMENT_CNT,
			P.LIKE_CNT 			AS POST_LIKE_CNT,
			P.WRITTEN_AT 		AS POST_WRITTEN_AT,
			P.UPDATED_AT 		AS POST_UPDATED_AT,
			PU.ID 				AS POST_WRITER_ID,
			PU.NICK_NAME 		AS POST_WRITER_NICK_NAME,
			I.ID 				AS IMAGE_ID,
			I.NAME 				AS IMAGE_NAME,
			C.ID 				AS CMT_ID,
			C.PARENT_ID 		AS CMT_PARENT_ID,
			C.CONTENT 			AS CMT_CONTENT,
			C.COMMENT_CNT 		AS CMT_COMMENT_CNT,
			C.LIKE_CNT 			AS CMT_LIKE_CNT,
			C.WRITTEN_AT 		AS CMT_WRITTEN_AT,
			C.UPDATED_AT 		AS CMT_UPDATED_AT,
			CU.ID 				AS CMT_WRITER_ID,
			CU.NICK_NAME 		AS CMT_WRITER_NICK_NAME
		FROM
			OUTMOON_POST AS P
		LEFT JOIN OUTMOON_USER AS PU ON
			P.WRITER_ID = PU.ID
		LEFT JOIN OUTMOON_LINK_POST_IMAGE AS LPI ON
			P.ID = LPI.POST_ID
		LEFT JOIN OUTMOON_IMAGE AS I ON
			LPI.IMAGE_ID = I.ID
		LEFT JOIN ( WITH RECURSIVE MAIN AS (
			SELECT
				ARRAY [ID] AS LEVEL, ID, PARENT_ID, CONTENT, WRITTEN_AT, UPDATED_AT, LIKE_CNT, COMMENT_CNT, POST_ID, WRITER_ID
			FROM
				OUTMOON_CMT
			WHERE
				PARENT_ID = 0
		UNION ALL
			SELECT
				LEVEL || OC.PARENT_ID, OC.ID, OC.PARENT_ID, OC.CONTENT, OC.WRITTEN_AT, OC.UPDATED_AT, OC.LIKE_CNT, OC.COMMENT_CNT, OC.POST_ID, OC.WRITER_ID
			FROM
				OUTMOON_CMT AS OC
			JOIN MAIN ON
				MAIN.ID = OC.PARENT_ID )
			SELECT
				MAIN.LEVEL, MAIN.ID, MAIN.PARENT_ID, MAIN.CONTENT, MAIN.WRITTEN_AT, MAIN.UPDATED_AT, MAIN.LIKE_CNT, MAIN.COMMENT_CNT, MAIN.POST_ID, MAIN.WRITER_ID
			FROM
				MAIN
			LIMIT 2 ) AS C ON
			P.ID = C.POST_ID
		LEFT JOIN OUTMOON_USER AS CU ON
			C.WRITER_ID = CU.ID
		WHERE
			P.ID = #{id}
			AND P.IS_USED = TRUE	
		ORDER BY
			P.ID,
			C.LEVEL,
			C.ID;
	</select>
	
	<select id="findAll" resultType="Post">
		SELECT 
			id,
			content,
			written_at ,
			updated_at ,
			like_cnt ,
			comment_cnt ,
			is_used ,
			writer_id 
		FROM outmoon_post
		WHERE  is_used = TRUE
		ORDER BY ID
		OFFSET ${pageDto.start}
		LIMIT ${pageDto.size};
	</select>
	
	
	<!-- SYJ, 추가 2020.06.12 -->
	<select id="findAllWithFullResource" resultMap="PostsWithFullResource">
		SELECT
			P.ID 			AS POST_ID,
			P.CONTENT 		AS POST_CONTENT,
			P.COMMENT_CNT 	AS POST_COMMENT_CNT,
			P.LIKE_CNT 		AS POST_LIKE_CNT,
			P.WRITTEN_AT 	AS POST_WRITTEN_AT,
			P.UPDATED_AT 	AS POST_UPDATED_AT,
			PU.ID 			AS POST_WRITER_ID,
			PU.NICK_NAME 	AS POST_WRITER_NICK_NAME,
			I.ID 			AS IMAGE_ID,
			I.NAME 			AS IMAGE_NAME,
			C.ID 			AS CMT_ID,
			C.PARENT_ID 	AS CMT_PARENT_ID,
			C.CONTENT 		AS CMT_CONTENT,
			C.COMMENT_CNT 	AS CMT_COMMENT_CNT,
			C.LIKE_CNT 		AS CMT_LIKE_CNT,
			C.WRITTEN_AT 	AS CMT_WRITTEN_AT,
			C.UPDATED_AT 	AS CMT_UPDATED_AT,
			CU.ID 			AS CMT_WRITER_ID,
			CU.NICK_NAME 	AS CMT_WRITER_NICK_NAME
		FROM
			(
				SELECT
					*
				FROM
					OUTMOON_POST
				ORDER BY ID 
				OFFSET #{pageDto.start}
				LIMIT #{pageDto.size}
			) AS P
		LEFT JOIN OUTMOON_USER AS PU ON
			P.WRITER_ID = PU.ID
		LEFT JOIN OUTMOON_LINK_POST_IMAGE AS LPI ON
			P.ID = LPI.POST_ID
		LEFT JOIN OUTMOON_IMAGE AS I ON
			LPI.IMAGE_ID = I.ID
		LEFT JOIN (
				WITH RECURSIVE MAIN AS (
					SELECT
						ARRAY [ID] AS LEVEL, ID, PARENT_ID, CONTENT, WRITTEN_AT, UPDATED_AT, LIKE_CNT, COMMENT_CNT, POST_ID, WRITER_ID
					FROM
						OUTMOON_CMT
					WHERE
						PARENT_ID = 0
				UNION ALL
					SELECT
						LEVEL || OC.PARENT_ID, OC.ID, OC.PARENT_ID, OC.CONTENT, OC.WRITTEN_AT, OC.UPDATED_AT, OC.LIKE_CNT, OC.COMMENT_CNT, OC.POST_ID, OC.WRITER_ID
					FROM
						OUTMOON_CMT AS OC
					JOIN MAIN ON
						MAIN.ID = OC.PARENT_ID
				)
				SELECT
					MAIN.LEVEL, MAIN.ID, MAIN.PARENT_ID, MAIN.CONTENT, MAIN.WRITTEN_AT, MAIN.UPDATED_AT, MAIN.LIKE_CNT, MAIN.COMMENT_CNT, MAIN.POST_ID, MAIN.WRITER_ID
				FROM
					MAIN
				LIMIT 2
			) AS C ON
			P.ID = C.POST_ID
		LEFT JOIN OUTMOON_USER AS CU ON
			C.WRITER_ID = CU.ID
		WHERE
			P.IS_USED = TRUE
		ORDER BY
			P.ID,
			C.LEVEL,
			C.ID;
	</select>
	
	<select id="countTotal" resultType="Long">
		SELECT 
			COUNT(*)
		FROM outmoon_post;
	</select>
	
	<update id="update" parameterType="Post">
		UPDATE	outmoon_post
		SET		content = #{content},
				updated_at = now()
		WHERE	id = #{id};
	</update>
	
	<update id="deleteByFlag">
		UPDATE	outmoon_post 
		SET		is_used = FALSE 
		WHERE	id = #{postId};
	</update>
	
	<delete id="deleteById" parameterType="Long">
		DELETE
			FROM OUTMOON_POST
		WHERE
			ID = #{id};
	</delete>
	
</mapper>